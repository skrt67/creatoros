// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-py"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  email         String        @unique
  hashedPassword String
  name          String?
  plan          String        @default("FREE") // FREE, PRO, ENTERPRISE
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  workspaces    Workspace[]
  subscription  Subscription?
  tiktokAccount TikTokAccount?
  scheduledPosts ScheduledPost[]
  usageTracking UsageTracking[]

  @@map("users")
}

model UsageTracking {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  month           String   // Format: YYYY-MM
  videosProcessed Int      @default(0)
  limit           Int      @default(3) // 3 for FREE, -1 for unlimited
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([userId, month])
  @@map("usage_tracking")
  @@index([userId, month])
}

model TikTokAccount {
  id              String    @id @default(cuid())
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tiktokUserId    String    @unique
  username        String
  accessToken     String
  refreshToken    String?
  followers       Int       @default(0)
  videoCount      Int       @default(0)
  totalLikes      Int       @default(0)
  totalViews      Int       @default(0)
  lastSyncedAt    DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("tiktok_accounts")
}

model Workspace {
  id          String        @id @default(cuid())
  name        String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  ownerId     String
  owner       User          @relation(fields: [ownerId], references: [id])
  videoSources VideoSource[]

  @@map("workspaces")
}

model VideoSource {
  id             String          @id @default(cuid())
  youtubeUrl     String
  title          String?
  status         String          @default("PENDING")
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  workspaceId    String
  workspace      Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  processingJob  ProcessingJob?

  @@map("video_sources")
}

model ProcessingJob {
  id            String         @id @default(cuid())
  temporalWorkflowId String    @unique
  status        String         @default("STARTED")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  videoSourceId String         @unique
  videoSource   VideoSource    @relation(fields: [videoSourceId], references: [id], onDelete: Cascade)
  transcript    Transcript?
  contentAssets ContentAsset[]

  @@map("processing_jobs")
}

model Transcript {
  id              String    @id @default(cuid())
  fullTranscript  Json
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  jobId           String    @unique
  job             ProcessingJob @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@map("transcripts")
}

model ContentAsset {
  id        String     @id @default(cuid())
  type      String
  content   String
  status    String     @default("GENERATED")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  jobId     String
  job       ProcessingJob @relation(fields: [jobId], references: [id], onDelete: Cascade)
  scheduledPosts ScheduledPost[]

  @@map("content_assets")
}

model ScheduledPost {
  id              String       @id @default(cuid())
  contentAssetId  String
  contentAsset    ContentAsset @relation(fields: [contentAssetId], references: [id], onDelete: Cascade)
  userId          String
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  platform        String       // TWITTER, LINKEDIN, INSTAGRAM, TIKTOK, YOUTUBE
  scheduledDate   DateTime
  status          String       @default("SCHEDULED") // SCHEDULED, PUBLISHED, FAILED, CANCELLED
  publishedAt     DateTime?
  errorMessage    String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@map("scheduled_posts")
  @@index([userId, scheduledDate])
  @@index([status, scheduledDate])
}

model Subscription {
  id                 String   @id @default(cuid())
  userId             String   @unique
  user               User     @relation(fields: [userId], references: [id])
  stripeCustomerId   String   @unique
  stripeSubscriptionId String @unique
  stripePriceId      String
  stripeCurrentPeriodEnd DateTime
  status             String

  @@map("subscriptions")
}

// Enums removed - using strings instead for compatibility with PostgreSQL types
